#!/usr/bin/env bash
#===============================================================================
# Adds a content link to a test data file that will be referenced using CMake's
# ExternalData mechanism
#===============================================================================
USAGE="<file1> [<file2> <file3> ...]"
OPTIONS_SPEC=
SUBDIRECTORY_OK=Yes
. "$(git --exec-path)/git-sh-setup"

# Prefix for renamed content files
CONTENT_RENAME_PREFIX="EXTERNALDATA_"
# Hashing algorithm
HASH_ALG="MD5"
# Extension for content link files
CONTENT_LINK_EXTENSION=".md5"
# Output indentation
INDENT="    "
# Upload server
PUSH_SERVER_URL_PREFIX="http://fileserver.org/TestingData/$HASH_ALG"

# 
# Adds a content link for a single
#   @param $1 - Path to the test data that will be added
#
add_test_data() {
  content_file=$1
  echo "Adding new data file '$content_file'"
  
  hash=$(hash_code $content_file)
  echo "${INDENT}${HASH_ALG} hash: $hash"
  if [ $? -gt 0 ]; then
    echo $hash
    exit 1
  fi
  
  content_link_filename=$(content_link_filename $content_file)
  if [ -f $content_link_filename ]; then
   echo "${INDENT}${content_file} already referenced as ${content_link_filename}"
   echo "${INDENT}Nothing added."
   return 0
  fi

  renamed_file=$(rename_content $content_file $hash)
  echo -e "${INDENT}Content location: ${renamed_file}"

  content_link=$(create_content_link $content_link_filename $hash)
  echo -e "${INDENT}Content link: ${content_link}"
  
  git_add $content_link
  echo -e "${INDENT}$content_link staged for commit"
  
  echo
  echo "${INDENT}Please upload ${renamed_file} to ${PUSH_SERVER_URL_PREFIX}/$hash"

  echo
}

# 
# Computes the hash, using the algorithm defined in HASH_ALG, of the given file.
# Hash code is printed to stdout
#   @param $1 - Path to the file whose hash is computed
#   @return 1 on failure, 0 on success
hash_code() {
  if [ "$HASH_ALG" = "MD5" ]; then
    echo $(md5sum $1)
  else
    echo "Unknown hashing algorithm '$HASH_ALG' requested"
    return 1
  fi
}

# 
# Computes the MD5 checksum of the given file.
# MD5 code is printed to stdout
#   @param $1 - Path to the file whose hash is computed
md5sum() {
  md5cmd="cmake -E md5sum"
  cmake_output=$($md5cmd $1)
  # CMake output is of form: HASH   filename
  md5=$(echo $cmake_output | awk '{print $1}')
  echo $md5
}

# 
# Rename a file to the hashed variant: ${CONTENT_RENAME_PREFIX}${original_filename}.$hash_code
# Path to the new full path is printed to stdout
#   @param $1 - Path to the original file
#   @param $2 - Hash code of the file content
rename_content() {
  directory_name=$(dirname $1)
  original_filename=$(basename $1)
  hash_code=$2
  hashed_filename=${CONTENT_RENAME_PREFIX}${original_filename}.$hash_code
  full_path=$directory_name/$hashed_filename
  # Rename the file
  mv $1 $full_path
  # Allow caller to capture the value
  echo $full_path
}

# 
# Create a text file containing the hash of the content named filename.ext.hash
# Path to the new full path is printed to stdout
#   @param $1 - New content link filename
#   @param $2 - Hash code of the file content
create_content_link() {
  content_link_filename=$1
  # Create file
  echo $2 > ${content_link_filename}
  # Echo filename to caller
  echo ${content_link_filename}
}

#
# Create the filename for the content link
#   @param $1 Path to original file
content_link_filename() {
  echo ${1}${CONTENT_LINK_EXTENSION}
}

#
# Adds the given file to git
#   @param $1 - Path to file
#
git_add() {
  git add $1
}

#-------------------------------------------------------------------------------

# Check arguments
if [ $# = 0 ]; then
  usage
fi

datafiles=$*
for datafile in $datafiles; do
  add_test_data $datafile
done

